//===-- VanillaISelDAGToDAG.cpp - A dag to dag inst selector for Vanilla ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines a DAG pattern matching instruction selector for Vanilla,
// converting from a legalized dag to a Vanilla dag.
//
//===----------------------------------------------------------------------===//

#include "Vanilla.h"
#include "VanillaRegisterInfo.h"
#include "VanillaSubtarget.h"
#include "VanillaTargetMachine.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"
using namespace llvm;

#define DEBUG_TYPE "vanilla-isel"

// Instruction Selector Implementation
namespace {

class VanillaDAGToDAGISel : public SelectionDAGISel {
public:
  explicit VanillaDAGToDAGISel(VanillaTargetMachine &TM) : SelectionDAGISel(TM) {}

  const char *getPassName() const override {
    return "Vanilla DAG->DAG Pattern Instruction Selection";
  }

private:
// Include the pieces autogenerated from the target description.
#include "VanillaGenDAGISel.inc"

  SDNode *Select(SDNode *N) override;

  // Complex Pattern for address selection.
  bool SelectAddr(SDValue Addr, SDValue &REG);
};
}

// ComplexPattern used on Vanilla Load/Store instructions
bool VanillaDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &REG) {
  // if Address is FI, get the TargetFrameIndex.
  SDLoc DL(Addr);
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    REG   = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    return true;
  }

  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress)
    return false;

  // Addresses of the form FI+const or FI|const
  if (CurDAG->isBaseWithConstantOffset(Addr)) {
    //llvm_unreachable("SelectAddr meets 'base with constant offset'");
    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1));
    if (isInt<32>(CN->getSExtValue())) {

      // If the first operand is a FI, get the TargetFI Node
      if (FrameIndexSDNode *FIN =
              dyn_cast<FrameIndexSDNode>(Addr.getOperand(0)))
        REG = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
      else
        REG = Addr.getOperand(0);

      SDValue offset_val=CurDAG->getTargetConstant(CN->getSExtValue(), DL, MVT::i32);
      //MachineSDNode *offset_reg=CurDAG->getMachineNode(Vanilla::MOV, DL, MVT::i32, offset_val);
      //offset_reg->dump();
      //MachineSDNode *addr= CurDAG->getMachineNode(Vanilla::ADDU, DL, MVT::i32, REG, SDValue(offset_reg));
      SDValue addr=CurDAG->getNode(ISD::ADD, DL, MVT::i32, REG, offset_val);
      //Addr=addr;
      REG=Addr;
      
      return true;
    }
    else{
      llvm_unreachable("Not handled.");
    }
  }

  REG   = Addr;
  //Offset = CurDAG->getTargetConstant(0, DL, MVT::i32);
  return true;
}

SDNode *VanillaDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // Dump information about the Node being selected
  DEBUG(dbgs() << "Selecting: "; Node->dump(CurDAG); dbgs() << '\n');

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << '\n');
    return NULL;
  }

  switch (Opcode) {
    default: break;
    case ISD::FrameIndex: {
      int FI = cast<FrameIndexSDNode>(Node)->getIndex();
      EVT VT = Node->getValueType(0);
      SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
      unsigned Opc = Vanilla::MOV;
      if (Node->hasOneUse()){
        return CurDAG->SelectNodeTo(Node, Opc, VT, TFI);
      }
      return CurDAG->getMachineNode(Opc, SDLoc(Node), VT, TFI);
    }
  }
  // tablegen selection should be handled here.

  // Select the default instruction
  SDNode *ResNode = SelectCode(Node);

  return ResNode;
}

FunctionPass *llvm::createVanillaISelDag(VanillaTargetMachine &TM) {
  return new VanillaDAGToDAGISel(TM);
}

